!!!!    6    0    1 1641509000   0000                                         
! Part Name:              R5H30211
! Alias:                  AT90SC12818RCU,N2G-QUACK
! Part Type:              VLSI
! Description:            Quack Security Chip, I2C Bus Interface
! Manufacturer:           Renesas Technology, Atmel
! Package Style:          20 pin QFN (21 pins if including EPAD)
! Created:                Jul 27, 2007
! Updated:                Jan 04, 2008. Added Cisco part number.
! Updated:                Dec 10, 2011. Update program for ACT2 By Ben.
! Programmer:             sama
! Tester:                 HP3070
! Processor:              VPU
! Vector Format:          VCL
! Fault coverage:         On board ICT programming.
! Constraints:            Test developed with device address pins (3,14,2)
!                         are all '000'. Modify sub 'IC_ADDR' if these pins
!                         are tied accordingly if different.

test digital;Data(*)  !! data from testplan

sequential
vector cycle 150u
receive delay 144u

default device "act2"
set terminators to on

assign VCC  to pins *
assign GND  to pins *,*

assign ADDR to pins 3, 14, 2    !A2,A1,A0
assign SCL  to pins 12
assign SDA  to pins 13
assign RST  to pins 4
assign NC   to pins *,*,*,*,*,*,*,*,*,*,*,*

power  VCC, GND
inputs ADDR,SCL,RST
bidirectional SDA
nondigital  NC

disable SDA with SCL to "1"

capture SDA

family LVT

set load on groups SDA to pull up

!#############################################################################

vector INIT1
 drive SDA
 set RST to "0"
 set ADDR to "xxx"
 set SDA  to "1"
 set SCL  to "1"
end vector

vector KEEP1
 receive SDA
 set RST to "k"
 set ADDR to "kkk"
 set SDA  to "x"
 set SCL  to "k"
end vector

vector KEEP2
 drive SDA
 set RST to "k"
 set ADDR to "kkk"
 set SDA  to "k"
 set SCL  to "k"
end vector

vector RST_0
 initialize to KEEP1
 set RST   to "0"
end vector

vector RST_1
 initialize to KEEP1
 set RST   to "1"
end vector

vector A_000
 initialize to KEEP1
 set ADDR   to "000"
end vector

vector A_001
 initialize to KEEP1
 set ADDR   to "001"
end vector

vector A_010
 initialize to KEEP1
 set ADDR   to "010"
end vector

vector A_011
 initialize to KEEP1
 set ADDR   to "011"
end vector

vector A_100
 initialize to KEEP1
 set ADDR   to "100"
end vector

vector A_101
 initialize to KEEP1
 set ADDR   to "101"
end vector

vector A_110
 initialize to KEEP1
 set ADDR   to "110"
end vector

vector A_111
 initialize to KEEP1
 set ADDR   to "111"
end vector

vector SK_10
 initialize to KEEP1
 set SCL    to "0"
end vector

vector SK_11
 initialize to KEEP1
 set SCL    to "1"
end vector

vector SK_20
 initialize to KEEP2
 set SCL    to "0"
end vector

vector SK_21
 initialize to KEEP2
 set SCL    to "1"
end vector

vector R_X
 initialize to KEEP1
 set SDA    to "x"
end vector

vector R_0
 initialize to KEEP1
 set SDA    to "0"
end vector

vector R_1
 initialize to KEEP1
 set SDA    to "1"
end vector

vector D_0
 initialize to KEEP2
 set SDA    to "0"
end vector

vector D_1
 initialize to KEEP2
 set SDA    to "1"
end vector

! ****************************************************************************

sub RSTIC
 repeat 40 times
  execute RST_0
 end repeat
 repeat 8200 times
  execute RST_1
 end repeat
wait 1800m
end sub

sub IDLE1
 repeat 20 times
  execute KEEP1
 end repeat
end sub

sub IDLE2
 repeat 20 times
  execute KEEP2
 end repeat
end sub

sub STRT
 execute D_1
 execute D_1
 execute SK_21
 execute SK_21
 execute D_0
 execute D_0
 execute SK_20
 execute SK_20
end sub

sub STOP
 execute SK_20
 execute SK_20
 execute D_0
 execute D_0
 execute SK_21
 execute SK_21
 execute D_1
 execute D_1
 repeat 20 times
  execute KEEP2
 end repeat
end sub

sub WR(D7,D6,D5,D4,D3,D2,D1,D0)
 execute D7
 execute SK_21
 execute SK_20
 execute D6
 execute SK_21
 execute SK_20
 execute D5
 execute SK_21
 execute SK_20
 execute D4
 execute SK_21
 execute SK_20
 execute D3
 execute SK_21
 execute SK_20
 execute D2
 execute SK_21
 execute SK_20
 execute D1
 execute SK_21
 execute SK_20
 execute D0
 execute SK_21
 execute SK_10
 execute R_0    ! Acknowledge bit
 execute SK_11
 execute SK_10
 call IDLE1
end sub

sub RD(D7,D6,D5,D4,D3,D2,D1,D0)
 execute SK_11
 execute D7
 execute SK_10
 execute SK_11
 execute D6
 execute SK_10
 execute SK_11
 execute D5
 execute SK_10
 execute SK_11
 execute D4
 execute SK_10
 execute SK_11
 execute D3
 execute SK_10
 execute SK_11
 execute D2
 execute SK_10
 execute SK_11
 execute D1
 execute SK_10
 execute SK_11
 execute D0
 execute SK_10
 execute D_0    ! Acknowledge bit
 execute SK_21
 execute SK_20
 execute SK_10
 call IDLE1
end sub

sub IC_ADDR
 call STRT
 execute D_1    ! b1110XXX, XXX = A2,A1,A0, -    !Slave address = 75H
 execute SK_21
 execute SK_20
 execute D_1
 execute SK_21
 execute SK_20
 execute D_1
 execute SK_21
 execute SK_20
 execute D_0
 execute SK_21
 execute SK_20
 execute D_1    ! Address bit A2, Change to match pin A2 if tied
 execute SK_21
 execute SK_20
 execute D_0    ! Address bit A1, Change to match pin A1 if tied
 execute SK_21
 execute SK_20
 execute D_1    ! Address bit A0, Change to match pin A0 if tied
 execute SK_21
 execute SK_20
end sub

sub WR_COMMAND
 call IC_ADDR
 execute D_0    ! Write operation
 execute SK_21
 execute SK_10
 execute R_0    ! Acknowledge bit
 execute SK_11
 execute SK_10
 call IDLE1
end sub

sub RD_COMMAND
 call IC_ADDR
 execute D_1    ! Read operation
 execute SK_21
 execute SK_10
 execute R_0    ! Acknowledge bit
 execute SK_11
 execute SK_10
 call IDLE1
end sub

sub START_READ
 call STOP
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0,R_0,R_0,R_x,R_x)
 call STOP
end sub
sub SYNC1
 repeat 8 times
  call STRT
  wait 20m
  call STOP
  wait 20m
 end repeat
end sub

sub SCC_CMD_START
 call WR_COMMAND
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_1)  ! 01
end sub

sub SCC_CMD_CONT
 call WR_COMMAND
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_1,D_0)  ! 02
end sub

sub SCC_CMD_END
 call WR_COMMAND
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_1,D_1)  ! 03
end sub

sub RD_BYTE_COUNT_2
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_0)  ! 02
end sub

sub RD_BYTE_COUNT_3
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_1,R_1)  ! 03
end sub

sub RD_BYTE_COUNT_20
 call RD_COMMAND
 call RD(R_0,R_0,R_1,R_0, R_0,R_0,R_0,R_0)  ! 20
end sub

sub RD_BYTE_COUNT_0
 call RD_COMMAND
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_0,R_0)  ! 02
end sub



sub DUMMY_WR_BYTE
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)
end sub

sub DUMMY_RD_BYTE
 call RD(R_X,R_X,R_X,R_X, R_X,R_X,R_X,R_X)
end sub

sub FLOW_CONTROL_GET_NEXT
 call SCC_CMD_START
 call WR(D_0,D_1,D_1,D_0, D_0,D_1,D_0,D_0)  ! 64, Get next SCC message
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)  ! 00, Version
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)  ! 00, Length
 call STOP
 call SCC_CMD_CONT
 call WR(D_1,D_0,D_0,D_1, D_1,D_0,D_1,D_1)  ! 9B, CRC
 call DUMMY_WR_BYTE
 call DUMMY_WR_BYTE
 call STOP
 call SCC_CMD_END
 call DUMMY_WR_BYTE
 call DUMMY_WR_BYTE
 call DUMMY_WR_BYTE
 call STOP
 wait 5m
end sub

! ***************************** Reset IC *************************************

unit "Reset Quack IC"
 execute INIT1
 execute A_101
 call RSTIC
!wait800m
end unit

! **************************** Read SCC ID ***********************************

unit "Get SCC ID Command"
 call SCC_CMD_START
 call WR(D_0,D_1,D_1,D_0, D_0,D_0,D_0,D_1)  ! 61, GET_SCC_ID
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)  ! 00, Version
 call WR(D_0,D_0,D_0,D_0, D_0,D_0,D_0,D_0)  ! 00, Length
 call STOP
 call SCC_CMD_END
 call STOP

 wait 80m

 call RD_BYTE_COUNT_3                       ! Read ID
 call RD(R_0,R_0,R_0,R_1, R_0,R_0,R_0,R_1)  ! ID =11
 call RD(R_0,R_0,R_0,R_0, R_0,R_0,R_0,R_0)  ! 00
 call RD(R_0,R_0,R_0,R_0, R_0,R_1,R_0,R_0)  ! 04
 call STOP

 call STOP
 call RD_COMMAND
!call RD(R_x,R_x,R_x,R_x,R_x,R_x,R_x,R_x)
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute D_0    ! Acknowledge bit
 execute SK_21
 execute SK_20
 execute SK_10
 call IDLE1 !!>>>>>>>>>>>>>>>>>>>>>Capture ID Byte 1
 call STOP

 call RD_COMMAND
!call RD(R_x,R_x,R_x,R_x, R_x,R_x,R_x,R_x)
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute D_0    ! Acknowledge bit
 execute SK_21
 execute SK_20
 execute SK_10
 call IDLE1 !!>>>>>>>>>>>>>>>>>>>>>Capture ID Byte 2
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute SK_11 capture
 execute SK_10
 execute D_0    ! Acknowledge bit
 execute SK_21
 execute SK_20
 execute SK_10
 call IDLE1 !!>>>>>>>>>>>>>>>>>>>>>Capture ID Byte 3
 call STOP
 fetch Data(*)
end unit

